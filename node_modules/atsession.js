"use strict";

var ATSocket=require('atsocket.js');
var assert = require('assert');
var functions = require('atfunctions.json');
var path=require('path');

function GetMessagesR(messages, getmorechannel, getmore, print_chat_line) {
  if (!messages) {
    return false;
  }
  for (var i=0; i<messages.length; i++) {
    print_chat_line(messages[i]);
  }

  if (getmore>0) {
    GetMessages.call(this, getmorechannel, 0, getmore, print_chat_line);
  }

  return true;
}

function GetMessages(channel, start, count, print_chat_line) {
  var max=100;
  var that=this;

  assert(this.sock);
  if (count>max) {
    this.sock.rpc(['chatHub','GetMessages',channel,count-max,max], function (r) { return GetMessagesR.call(that, r, channel, count-max, print_chat_line);});
  } else {
    this.sock.rpc(['chatHub','GetMessages',channel,0,count], function (r) { return GetMessagesR.call(that, r, channel, 0, print_chat_line);});
  }
}

function DoAuthR(authtoken, success, failure) {
  if (authtoken<0) {
    failure();
  } else {
    this.authtoken=authtoken;
    success(authtoken);
  }

  return true;
}

ATSession.prototype.login = function(username, password, success, failure) {
  var that=this;

  this.username=username;
  this.sock.rpc(['authHub', 'DoAuth', username, password], function(r) { return DoAuthR.call(that, r, success, failure)});
}

ATSession.prototype.useauthtoken = function(success, failure) {
  var fs=require('fs');
  var that=this;

  try {
    this.username=fs.readFileSync(path.join(this.confdir, "username"), {encoding: 'utf8'});
    this.authtoken=fs.readFileSync(path.join(this.confdir, "authtoken"), {encoding: 'ascii'});
  } catch (e) {
    failure();
    return true;
  }
  if ((typeof(success) === 'function')||(typeof(failure) === 'function')) {
    this.sock.rpc(['infoHub', 'GetAccountInfo', this.username, this.authtoken], function(r) {
      if (r.Username===that.username) {
        if (typeof(success) === 'function') { success(); }
      } else {
        if (typeof(failure) === 'function') { failure(); }
      }
      return true;
    });
  }
}

function SendMessageR(result) {
  if (result==1) {
  } else if (result==-99) { //bad auth token
    this.output(["Logged out (-99)"]);
    if (this.onLogoutFn) {
      this.onLogoutFn();
    }
  } else if (result==-50) { //bad timestamp
    this.output(["Bad timestamp (more than 20 seconds old)"]);
  } else if (result==-97) { //invalid text
    this.output(["Invalid text"]);
  } else if (result==-90) { //flood
    this.output(["Slow down"]);
  } else if (result==-89) { //banned
    this.output(["Banned"]);
  } else if (result==-1) { //invalid username
    this.output(["Logged out (-1)"]);
    if (this.onLogoutFn) {
      this.onLogoutFn();
    }
  } else {
    this.output(["SendMessage: Unknown error "+result]);
    return false;
  }

  return true;
}

ATSession.prototype.SendMessage = function(message, channel) {
  if (this.authtoken==="") {
    this.output("not logged in");
  } else {
    var ts = parseInt(new Date().getTime() / 1000); //https://www.atomic-trade.com/js/trade.js
    this.sock.rpc(['chatHub', 'SendMessage', this.username, this.authtoken, message, channel, ts], SendMessageR);
  }
}

function onOpen(sock) {
}

function ATSession() {
  this.sock  = new ATSocket();
  assert(this.sock);
  this.sock.on(
  null,
  'open',
  onOpen
  );
  this.print_chat_line=function(){};
  this.authtoken="";
  this.username="";
  this.onLogoutFn=null;
  this.debug_level=0;
  // http://shapeshed.com/writing-cross-platform-node/
  this.confdir = path.join((process.platform === 'win32') ? process.env.HOMEPATH : process.env.HOME, '.atcmd');
}

ATSession.prototype.start = function() {
  this.sock.connect();
}

ATSession.prototype.onLogout = function(onLogoutFn) {
  this.onLogoutFn=onLogoutFn;
}

ATSession.prototype.setOutput = function(output) {
  this.output=output;
  this.sock.setOutput(output);
}

ATSession.prototype.set_print_chat_line = function(print_chat_line) {
  this.print_chat_line=print_chat_line;
  this.sock.on(
    'ChatHub',
    'chatRX',
    print_chat_line
  );
}

ATSession.prototype.set_debug_level = function(debug_level) {
  //0: none; 1: standard; 2: verbose
  assert(debug_level>=0);
  assert(debug_level<=2);
  this.debug_level=debug_level;
  this.sock.set_debug_level(debug_level);
}

ATSession.prototype.subscribe = function(channel, callback) {
  assert(this.sock);
  this.sock.rpc(['chatHub','Subscribe',channel], function(r) {return callback(r)});
}

ATSession.prototype.getBacklog = function(channel, backlog, callback) {
  assert(this.sock);
  GetMessages.call(this, channel,0,backlog,callback);
}

ATSession.prototype.setBaseURL = function(theURL) {
  this.sock.setBaseURL(theURL);
}

ATSession.prototype.setHubs = function(theHubs) {
  this.sock.setHubs(theHubs);
}

ATSession.prototype.rpc = function(hubname, funcname, params, callback) {
  var that=this;
  if (!functions[hubname]) {
    console.log(hubname+" not found");
    assert(functions[hubname]);
  }
  var funcdata=functions[hubname][funcname];
  if (!funcdata) {
    console.log(hubname+"."+funcname+" not found");
    assert(funcdata);
  }
  var args=funcdata[0];
  var arr=[hubname, funcname.charAt(0).toUpperCase()+funcname.slice(1)]; //need to capitalize first letter of fname
  args.forEach(function(param) {
    if (param === 'username') {
      arr.push(that.username);
    } else if (param === 'authtoken') {
      arr.push(that.authtoken);
    } else if (param === 'timestamp') {
      var ts = parseInt(new Date().getTime() / 1000); //https://www.atomic-trade.com/js/trade.js
      arr.push(ts);
    } else {
      arr.push(params.shift());
    }
  });

  this.sock.rpc(arr, callback);
}

module.exports=ATSession;
